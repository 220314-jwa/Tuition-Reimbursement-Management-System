package com.trms.data.Impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import com.trms.data.ReimbursementDAO;
import com.trms.factory.ConnectionFactory;
import com.trms.models.Employee;
import com.trms.models.Reimbursement;

public class ReimbursamentDAOImpl implements ReimbursementDAO {

	Connection connection;

	public ReimbursamentDAOImpl() {
		connection = ConnectionFactory.getConnection();
	}

	public long create(Reimbursement newReimbursement) {

		String sql = "INSERT INTO reimbursement(id,submitter_id,event_type_id,status_id,"
				+ "event_date,cost,description,location,submitted_at)" + "Values(default,?,?,?,?,?,?,?,?);";

		try(Connection con = connection;PreparedStatement preparedStatement = connection.prepareStatement(sql,
				PreparedStatement.RETURN_GENERATED_KEYS);) {

			preparedStatement.setLong(1, newReimbursement.getSubmitterId());
			preparedStatement.setLong(2, newReimbursement.getEventTypeId());
			preparedStatement.setLong(3, newReimbursement.getStatusId());
			preparedStatement.setTimestamp(4, new Timestamp(newReimbursement.getEventDate().getTime()));
			preparedStatement.setLong(5, newReimbursement.getCost());
			preparedStatement.setString(6, newReimbursement.getDescription());
			preparedStatement.setString(7, newReimbursement.getLocation());
			preparedStatement.setTimestamp(8, new Timestamp(System.currentTimeMillis()));

			int count = preparedStatement.executeUpdate();

			ResultSet resultSet = preparedStatement.getGeneratedKeys();

			if (count > 0) {
				System.out.println("Reimbursement request added!");
				// return the id generated by this entry
				resultSet.next();
				int id = resultSet.getInt(1);
				return id;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("Something went wrong!");
		}

		return -1L;

	}

	public Reimbursement getById(long id) {
		
		String sql = "SELECT * FROM reimbursement e where e.id= ?;";
		Reimbursement request = null;
		
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);) {
			
			preparedStatement.setLong(1,id);
			// execute the command, and save the count of rows affected:
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				request = ReimbursamentDAOImpl.parseResultSet(resultSet);
				//System.out.println(empl);
				// now, we've created a pet Java object based on the info from our table:
			} else {
				System.out.println("Reimbursement request with id - " + id +" - does not exist!");
				// return null in this case:
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return request;
	
	}

	public List<Reimbursement> getAllByEmployee(Employee employee) {
		
		ArrayList<Reimbursement> reimbursements = new ArrayList<>();
		String sql = "SELECT * FROM reimbursement r INNER JOIN status s ON r.status_id=s.id INNER JOIN event e on r.event_type_id = e.id  WHERE submitter_id =? ;";
		
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
			
			preparedStatement.setLong(1, employee.getId());
			// get the result from our query:
			ResultSet resultSet = preparedStatement.executeQuery();
			// because the resultSet has multiple pets in it, we don't just want an
			// if-statement. We want a loop:
			while (resultSet.next()) {
				Reimbursement reimbursement = ReimbursamentDAOImpl.parseResultSet(resultSet);
				reimbursements.add(reimbursement);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return reimbursements;

	}

	private static Reimbursement parseResultSet(ResultSet resultSet) {

		Reimbursement reimbursement = new Reimbursement();

		try {
			reimbursement.setRequestId(resultSet.getInt(1));
			reimbursement.setSubmitterId(resultSet.getInt(2));
			reimbursement.setEventTypeId(resultSet.getInt(3));
			reimbursement.setStatusId(resultSet.getInt(4));
			reimbursement.setEventDate(resultSet.getTimestamp(5));
			reimbursement.setCost(resultSet.getInt(6));
			reimbursement.setDescription(resultSet.getString(7));
			reimbursement.setLocation(resultSet.getString(8));
			reimbursement.setSubmittedAt(resultSet.getTimestamp(9));
			reimbursement.setStatus(resultSet.getString("status_name"));
			reimbursement.setEvent(resultSet.getString("event_name"));
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return reimbursement;
	}

	public void update(Reimbursement updatedObj) {
		
		String sql = "UPDATE reimbursement SET submitter_id = ?,event_type_id=?,status_id=?,event_date=?,cost=?,description=?,location=?,submitted_at=? where id = ?;";
    	
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
        
        	// fill in the template:
        	preparedStatement.setLong(1,updatedObj.getSubmitterId());
        	preparedStatement.setLong(2,updatedObj.getEventTypeId());
        	preparedStatement.setLong(3,updatedObj.getStatusId());
        	preparedStatement.setTimestamp(4,new Timestamp(updatedObj.getEventDate().getTime()));
        	preparedStatement.setLong(5,updatedObj.getCost());
        	preparedStatement.setString(6,updatedObj.getDescription());
        	preparedStatement.setString(7,updatedObj.getLocation());
        	preparedStatement.setTimestamp(8,new Timestamp(System.currentTimeMillis()));
        	preparedStatement.setLong(9,updatedObj.getRequestId());
        	// return a count of how many records were updated
        	int count = preparedStatement.executeUpdate();
        	
        	if(count != 1) {
        		System.out.println("Oops! Something went wrong with the update!");
        	}else {
        		System.out.println("Reimbursement request with id "+updatedObj.getRequestId()+" was updated!");
        	}
    		
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}

	}
	
	public List<Reimbursement> getReimbursementsByStatus(String status){
		
		List<Reimbursement> reimbursements = new ArrayList<>();
		String sql = "Select * from Reimbursement where status_id = ?;";
		
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
			
			preparedStatement.setLong(1,1);
			// get the result from our query:
			ResultSet resultSet = preparedStatement.executeQuery();
			// because the resultSet has multiple pets in it, we don't just want an
			// if-statesment. We want a loop:
			while (resultSet.next()) {
				Reimbursement reimbursement = ReimbursamentDAOImpl.parseResultSet(resultSet);
				reimbursements.add(reimbursement);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return reimbursements;
		
	}
	
	public void delete(Reimbursement objToDelete) {
		
		String sql = "DELETE FROM reimbursement WHERE id = ?;";
    	
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
    		
    		preparedStatement.setLong(1, objToDelete.getRequestId());
    		int count = preparedStatement.executeUpdate();
    		if (count != 1) {
    			System.out.println("Something went wrong with the deletion of reimbursement request!");
    		}
    		else {
    			System.out.println("Reimbursement request with id"+objToDelete.getRequestId()+" was deleted");
    		}
    	} catch (SQLException e) {
    		e.printStackTrace();
    	}	

	}

	@Override
	public List<Reimbursement> getAll() {
		
		List<Reimbursement> requests = new ArrayList<Reimbursement>();

		String sql = "SELECT * FROM reimbursement;";
		
        try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
            
            // get the result from our query:
            ResultSet resultSet = preparedStatement.executeQuery();
            // because the resultSet has multiple pets in it, we don't just want an if-statement. We want a loop:
            while(resultSet.next()) {
                Reimbursement request = ReimbursamentDAOImpl.parseResultSet(resultSet);
                requests.add(request);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return requests;
        
	}

}
