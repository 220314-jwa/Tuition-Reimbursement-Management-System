package com.trms.data.Impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.trms.data.EventDAO;
import com.trms.factory.ConnectionFactory;
import com.trms.models.Event;

public class EventDAOImpl implements EventDAO{
	
	Connection connection;
	
	public EventDAOImpl() {
		connection = ConnectionFactory.getConnection();
	}
	
	public long create(Event newEvent) {
		// create a basic string to store sql query for creating department
		String sql = "Insert into Event(id,event_name)" +
					 "Values(default,?);";
		
		try {
			
			PreparedStatement preparedStatement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
			
			preparedStatement.setString(1, newEvent.getEventTypeName());
			
			int count = preparedStatement.executeUpdate();
			
			ResultSet resultSet = preparedStatement.getGeneratedKeys();
			
			if(count>0) {
				
				System.out.println("Event added!");
				// return the id generated by this entry
				resultSet.next();
				int id = resultSet.getInt(1);
				
				return id;
				
			}else {
				System.out.println("Something went wrong when adding event type!");
			}
			
		}catch(SQLException e) {
			e.printStackTrace();
		}
		return -1L;
	}

	public Event getById(long id) {
		
		String sql = "select * from event where id =?;";
		Event event = null;
		
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);
			preparedStatement.setLong(1,id);
			// execute the command, and save the count of rows affected:
			ResultSet resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				event = EventDAOImpl.parseResultSet(resultSet);
				//System.out.println(empl);
				// now, we've created a pet Java object based on the info from our table:
			} else {
				System.out.println("Event with id - " + id +" - does not exist!");
				// return null in this case:
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return event;
		
	}
	
	private static Event parseResultSet(ResultSet resultSet) {

		Event event = new Event();

		try {
			event.setEventTypeId(resultSet.getInt(1));
			event.setEventTypeName(resultSet.getString(2));

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return event;
	}

	public List<Event> getAll() {

		List<Event> events = new ArrayList<Event>();

        String sql = "SELECT * FROM event;";
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            // get the result from our query:
            ResultSet resultSet = preparedStatement.executeQuery();
            // because the resultSet has multiple pets in it, we don't just want an if-statement. We want a loop:
            while(resultSet.next()) {
                Event event = EventDAOImpl.parseResultSet(resultSet);
                events.add(event);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return events;
	
	}

	public void update(Event updatedObj) {
		// we create the template for the SQL string:
    	String sql = "UPDATE event SET event_name = ? where id = ?;";
    	try {
        	PreparedStatement preparedStatement = connection.prepareStatement(sql);
        	// fill in the template:
        	preparedStatement.setString(1,updatedObj.getEventTypeName());
        	preparedStatement.setLong(2,updatedObj.getEventTypeId());

        	// return a count of how many records were updated
        	int count = preparedStatement.executeUpdate();
        	if(count != 1) {
        		System.out.println("Oops! Something went wrong with the update!");
        	}else {
        		System.out.println("Event with id "+updatedObj.getEventTypeId()+" was updated!");
        	}
        	
    		
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}
	}

	public void delete(Event objToDelete) {
		
		String sql = "DELETE FROM event WHERE id = ?;";
    	try {
    		PreparedStatement preparedStatement = connection.prepareStatement(sql);
    		preparedStatement.setLong(1, objToDelete.getEventTypeId());
    		int count = preparedStatement.executeUpdate();
    		if (count != 1) {
    			System.out.println("Something went wrong with the deletion of event with id "+objToDelete.getEventTypeId());
    		}
    		else {
    			System.out.println("Event with id"+objToDelete.getEventTypeId()+" was deleted");
    		}
    	} catch (SQLException e) {
    		e.printStackTrace();
    	}	
		
	}

	
}
