package com.trms.data.Impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.trms.data.DeptDAO;
import com.trms.factory.ConnectionFactory;
import com.trms.models.Department;

public class DeptDAOImpl implements DeptDAO {

	Connection connection;

	// get a connection from the connection factory:
	public DeptDAOImpl() {
		connection = ConnectionFactory.getConnection();
	}

	public long create(Department newDept) {

		// create a basic string to store sql query for creating department
		String sql = "insert into Department(id,dept_name)" + "values(default,?);";
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql,
				PreparedStatement.RETURN_GENERATED_KEYS);) {
			
			//preparedStatement.setLong(1, newDept.getId());
			preparedStatement.setString(1, newDept.getDeptName());
			//preparedStatement.setLong(2, newDept.getHeadId());

			// execute the command, and save the count of rows affected:
			int count = preparedStatement.executeUpdate();
			ResultSet resultSet = preparedStatement.getGeneratedKeys();
			if (count > 0) {
				
				// return the id generated by this entry
				resultSet.next();
				int id = resultSet.getInt(1);
				System.out.println("Dept added!" + id);
				return id;
				
			}
			// if 0 rows affected, something went wrong:
			else {
				System.out.println("Something went wrong when trying to add department!");

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return -1L;
	}

	public Department getById(long id) {
		String sql = "select * from department d where d.id = ?; ";
		Department dept = null;
		try(Connection con = connection;
				PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
			
			preparedStatement.setLong(1,id);
			// execute the command, and save the count of rows affected:
			ResultSet resultSet = preparedStatement.executeQuery();
			 if(resultSet.next()) {
				 dept  = DeptDAOImpl.parseResultSet(resultSet);
	                // now, we've created a pet Java object based on the info from our table:
	                return dept;            }
	            else {
	                System.out.println("Department with id "+ id + " does not exist!");
	                // return null in this case:
	            }

		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}

	public List<Department> getAll() {
		
		 List<Department> depts = new ArrayList<Department>();

	        String sql = "SELECT * FROM department;";
	        try(Connection con = connection;
	        		 PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
	           
	            // get the result from our query:
	            ResultSet resultSet = preparedStatement.executeQuery();
	            // because the resultSet has multiple pets in it, we don't just want an if-statement. We want a loop:
	            while(resultSet.next()) {
	                Department dept = DeptDAOImpl.parseResultSet(resultSet);
	                depts.add(dept);
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	        return depts;

		
	}
	
	private static  Department parseResultSet(ResultSet resultSet) {
		
		Department dept = new Department();
		
		try {
			dept.setId(resultSet.getInt(1));
			dept.setDeptName(resultSet.getString(2));}
		catch(SQLException e) {
			e.printStackTrace();
		}
		
		return dept;
	}

	public void update(Department updatedObj) {
	
		// we create the template for the SQL string:
    	String sql = "update department set dept_name = ? where id = ?;";
    	try(Connection con = connection;
    			PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
        	
        	// fill in the template:
        	preparedStatement.setString(1,updatedObj.getDeptName());
        	preparedStatement.setLong(2,updatedObj.getId());

  
      
        	// return a count of how many records were updated
        	int count = preparedStatement.executeUpdate();
        	if(count != 1) {
        		System.out.println("The department with id "+ updatedObj.getId()+" was not updated! ");
        	}
        	
    		
    	} catch(SQLException e) {
    		e.printStackTrace();
    	}

	}

	public void delete(Department objToDelete) {
		
		String sql = "delete from department where id = ?;";
    	try(Connection con = connection;
    			PreparedStatement preparedStatement = connection.prepareStatement(sql);) {
    		
    		preparedStatement.setLong(1, objToDelete.getId());
    		int count = preparedStatement.executeUpdate();
    		if (count != 1) {
    			System.out.println("Something went wrong with the deletion of department with id "+ objToDelete.getId());
    		}
    		else {
    			System.out.println("Dept with id"+objToDelete.getId()+"deleted");
    		}
    	} catch (SQLException e) {
    		e.printStackTrace();
    	}
    	


	}

}
